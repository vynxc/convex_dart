// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'simple.freezed.dart';

// These functions are ignored because they are not marked as `pub`: `connected_client`, `handle_direct_function_result`, `internal_action`, `internal_mutation`, `internal_set_auth`, `internal_subscribe`, `new`, `parse_json_args`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `fmt`, `fmt`, `from`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < SubscriptionHandle >>>
abstract class ArcSubscriptionHandle implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CallbackSubscriber>>
abstract class CallbackSubscriber
    implements RustOpaqueInterface, QuerySubscriber {
  @override
  Future<void> onError({required String message, String? value});

  @override
  Future<void> onUpdate({required String value});
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CallbackSubscriberDartFn>>
abstract class CallbackSubscriberDartFn
    implements RustOpaqueInterface, QuerySubscriber {
  @override
  Future<void> onError({required String message, String? value});

  @override
  Future<void> onUpdate({required String value});
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MobileConvexClient>>
abstract class MobileConvexClient implements RustOpaqueInterface {
  Future<String> action({
    required String name,
    required Map<String, String> args,
  });

  Future<String> mutation({
    required String name,
    required Map<String, String> args,
  });

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<MobileConvexClient> newInstance({
    required String deploymentUrl,
    required String clientId,
  }) => RustLib.instance.api.crateApiSimpleMobileConvexClientNew(
    deploymentUrl: deploymentUrl,
    clientId: clientId,
  );

  Future<String> query({
    required String name,
    required Map<String, String> args,
  });

  Future<void> setAuth({String? token});

  Future<ArcSubscriptionHandle> subscribe({
    required String name,
    required Map<String, String> args,
    required FutureOr<void> Function(String) onUpdate,
    required FutureOr<void> Function(String, String?) onError,
  });
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SubscriptionHandle>>
abstract class SubscriptionHandle implements RustOpaqueInterface {
  Future<void> cancel();
}

abstract class QuerySubscriber {
  Future<void> onError({required String message, String? value});

  Future<void> onUpdate({required String value});
}

@freezed
sealed class ClientError with _$ClientError implements FrbException {
  const ClientError._();

  /// An error that occurs internally here in the mobile Convex client.
  const factory ClientError.internalError({required String msg}) =
      ClientError_InternalError;

  /// An application specific error that is thrown in a remote Convex backend
  /// function.
  const factory ClientError.convexError({required String data}) =
      ClientError_ConvexError;

  /// An unexpected server error that is thrown in a remote Convex backend
  /// function.
  const factory ClientError.serverError({required String msg}) =
      ClientError_ServerError;
}
